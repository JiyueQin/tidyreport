devtools::document()
na_to_unknown(tibble(x = rep(1:5,3)))
devtools::document()
na_to_unknown(tibble(x = rep(1:5,3)))
na_to_unknown(tibble(x = rep(1:5,3)))
na_to_unknown(tibble(x = rep(1:5,3)))
devtools::load_all()
na_to_unknown(tibble(x = rep(1:5,3)))
na_to_unknown(tibble(x = rep(1:5,3)))
devtools::load_all()
na_to_unknown(tibble(x = rep(1:5,3)))
devtools::load_all()
na_to_unknown(tibble(x = rep(1:5,3)))
devtools::load_all(".")
?na_to_unknown
?na_to_unknown
devtools::document()
?na_to_unknown
library(yueyue)
na_to_unknown(tibble(x = rep(1:5,3)))
library(yueyue)
na_to_unknown(tibble(x = rep(1:5,3)))
?yueyue
library(yueyue)
?yueyue
help(yueyue)
devtools::document()
na_to_unknown(tibble(x = rep(1:5,3)))
devtools::install()
na_to_unknown(tibble(x = rep(1:5,3)))
?na_to_unknown()
na_to_unknown(tibble(x = rep(1:5,3)))
devtools::load_all()
na_to_unknown(tibble(x = rep(1:5,3)))
?mutate_if
devtools::document()
na_to_unknown(tibble(x = rep(1:5,3)))
na_to_unknown(tibble(x = rep(1:5,3)))
devtools::load_all()
na_to_unknown(tibble(x = rep(1:5,3)))
? %>%
devtools::load_all()
na_to_unknown(tibble(x = rep(1:5,3)))
?na_to_unknown
devtools::document()
devtools::load_all()
na_to_unknown(xx)
devtools::install()
cox_summary(ss)
na_to_unknown(dd)
yueyue::na_to_unknown(dd)
?add_column
?kable
?kable_styling
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::install()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
dat = tibble(main = rnorm(50),
age = sample(c(60:100, rep(NA, 10)), 50, replace = T),
gender = rep(c('F', 'M', NA), len = 50),
group = rep(1:4, len = 50),
score = runif(50,0, 100),
race = rep(factor(c('black', 'white', 'other')), 50, len = 50)) %>%
mutate(group = as.character(group))
get_desc_stat(dat = )
get_desc_stat(dat)
?str_sub
devtools::document()
devtools::load_all()
get_desc_stat(dat)
substring
?substring
substring('ddd',1,1)
substring('ddd',2)
substring('ddd',1,5)
########################################################################################
#     Function get_numeric_desc - get descriptive stat for one numeric variable,
#                                 NA will be removed to calculate the statistics
#
######################################################################################
get_numeric_desc = function(df, col){
if (anyNA(df %>% pull(col))) {message(paste('NA in', col, 'was removed'))}
tibble(mean = mean(df %>% pull(col), na.rm = T),
sd = sd(df %>% pull(col), na.rm = T),
variable = paste0(toupper_first(col), ', Mean(SD)')) %>%
mutate_if(is.double, ~round(.,1)) %>%
mutate(stat = paste0(mean, '(', sd, ')')) %>%
select(variable, stat) %>%
mutate_if(is.numeric, as.character)
}
get_desc_stat(na_to_unknown(dat), raw_name = T)
#############################################################################################
#     Function toupper_first - capitalize the first letter of a string or a string vec
#############################################################################################
toupper_first = function(string){
paste0(toupper(substring(string, 1,1)), substring(string, 2))
}
########################################################################################
#     Function get_numeric_desc - get descriptive stat for one numeric variable,
#                                 NA will be removed to calculate the statistics
#
######################################################################################
get_numeric_desc = function(df, col){
if (anyNA(df %>% pull(col))) {message(paste('NA in', col, 'was removed'))}
tibble(mean = mean(df %>% pull(col), na.rm = T),
sd = sd(df %>% pull(col), na.rm = T),
variable = paste0(toupper_first(col), ', Mean(SD)')) %>%
mutate_if(is.double, ~round(.,1)) %>%
mutate(stat = paste0(mean, '(', sd, ')')) %>%
select(variable, stat) %>%
mutate_if(is.numeric, as.character)
}
get_desc_stat = function(dat, raw = F, raw_name = F){
numeric = dat %>% select_if(is.numeric)
numeric_output = map_df(colnames(numeric), ~get_numeric_desc(numeric, .x))
character = dat %>% mutate_if(is.factor, as.character) %>% select_if(is.character)
if(raw){
character_output = map_df(colnames(character), ~get_char_desc(character, .x, raw = T))
}else{
character_output = map_df(colnames(character), ~get_char_desc(character, .x))
}
desc_output = bind_rows(numeric_output, character_output)
if(!raw_name) {
new_name = paste0('Sample(n=', nrow(dat), ')')
desc_output = desc_output %>% rename(!!new_name := stat)
}
if(raw) desc_output else desc_output %>% kable() %>% kable_styling(full_width = F, position = "left")
}
get_desc_stat(na_to_unknown(dat), raw_name = T)
devtools::document()
get_desc_stat(na_to_unknown(dat), raw_name = T)
devtools::load_all()
get_desc_stat(na_to_unknown(dat), raw_name = T)
?map_df
devtools::load_all()
get_desc_stat(na_to_unknown(dat), raw_name = T)
devtools::document()
get_desc_stat(na_to_unknown(dat), raw_name = T)
devtools::document()
get_desc_stat(na_to_unknown(dat), raw_name = T)
?get_desc_stat
devtools::load_all()
get_desc_stat(na_to_unknown(dat), raw_name = T)
?na_if
rm(get_desc_stat())
rm(get_desc_stat)
rm(toupper_first)
rm(get_numeric_desc)
devtools::load_all()
get_desc_stat(na_to_unknown(dat), raw_name = T)
?gther
?gather
??gather
devtools::document()
devtools::load_all()
get_desc_stat(na_to_unknown(dat), raw_name = T)
get_desc_stat_grouping(na_to_unknown(dat), 'gender')
devtools::load_all()
get_desc_stat_grouping(na_to_unknown(dat), 'gender')
?unite
devtools::load_all()
get_desc_stat_grouping(na_to_unknown(dat), 'gender')
get_desc_stat(na_to_unknown(dat), raw_name = T)
get_desc_stat_grouping(na_to_unknown(dat), 'gender')
devtools::load_all()
get_desc_stat_grouping(na_to_unknown(dat), 'gender')
devtools::install()
devtools::document()
devtools::load_all()
dat2 = tibble(temp = rnorm(50),
point = sample(c(60:100, rep(NA, 10)), 50, replace = T),
sex = rep(c('F', 'M', NA), len = 50),
trt = rep(1:4, len = 50),
weight = runif(50,0, 100)) %>%
mutate(trt = as.character(trt))
get_two_group_compare(dat2, 'sex')
kable
?kable
?bind_rows
devtools::document()
get_two_group_compare(dat2, 'sex')
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::install()
?ggploy
?ggplot
??ggplot
devtools::document()
devtoll
devtools::install()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
install.packages('cobalt')
install.packages('backports')
install.packages('cobalt')
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document(\)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
?yueyue
devtools::document()
devtools::install()
?yueyue::cox_summary
?eas::uds_z
?yueyue::get_desc_stat_grouping
devtools::document()
devtools::install()
sessionInfo()
sessionInfo()
devtools::document()
sessionInfo()
devtools::install()
install.packages('withr')
install.packages("withr")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
library(tidyverse)
# here is a sample hypothetical dataset used to calculate z-scores. You should prepare your dataset in this standard format.
starwars
starwars %>% dfsu
starwars %>% summarytools::dfSummary()
summarytools::dfSummary(starwars %>%)
summarytools::dfSummary(starwars)
starwars
library(summarytools)
dfSummary(starwars)
dfSummary(starwars[1:15])
dfSummary(starwars[1:14])
dfSummary(starwars[1:13])
dfSummary(starwars[1:11])
# here is a sample dataset modified from the dataset starwars in tidyverse .
sample_dat = starwars %>% select(height, mass, sex, gender) %>% filter(!is.na(gender))
devtools::install_github("JiyueQin/tidyreport")
library(tidyreport)
# get the descriptive statistics of the sample
get_desc_stat(sample_dat)
devtools::document()
devtools::document()
search()
# get the descriptive statistics of the sample
get_desc_stat(sample_dat)
devtools::install()
library(tidyreport)
search()
mtcars
mtcars %>% dim()
kable(mtcars)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?select
starwars
library(tidyreport)
starwars
mtcars
tidyverse::starwars
library(tidyverse)
# here is a sample dataset modified from the dataset starwars in tidyverse .
sample_dat = dplyr::select(starwars, height, mass, sex, gender) %>% filter(!is.na(gender))
sample_dat
starwars
starwars$species %>% unique()
# here is a sample dataset modified from the dataset starwars in tidyverse .
sample_dat = dplyr::select(starwars, height, mass, sex, gender) %>% filter(!is.na(gender)) %>%
select(height, sex, gender, mass)
save(sample_dat, file="data/sample_dat.RData")
# here is a sample dataset modified from the dataset starwars in tidyverse .
str(sample_dat)
# get the descriptive statistics of the sample
get_desc_stat(sample_dat)
library(tidyverse)
library(kableExtra)
# get the descriptive statistics of the sample
get_desc_stat(sample_dat)
# get the descriptive statistics stratified by gender and testing for gender difference
get_desc_stat_grouping(sample_dat, 'gender')
# get detailed descriptive statistics stratified by gender, sort the table by the order of variables in the data, no statistical testing
get_desc_stat_grouping(sample_dat, 'gender', detail = T, sort = T, test = F)
?get_desc_stat_grouping
# get the descriptive statistics of the sample
get_desc_stat(sample_dat)
# report median(IQR) instead of mean(SD) for height, highlight p values of <0.01
get_desc_stat_grouping(sample_dat, 'gender', median_vars = 'height')
# report median(IQR) instead of mean(SD) for height, highlight p values of <0.01
get_desc_stat_grouping(sample_dat, 'gender', median_vars = 'height', highlight_p = T)
# report median(IQR) instead of mean(SD) for height, highlight p values of <0.01
get_desc_stat_grouping(sample_dat, 'gender', median_vars = 'height', highlight=T)
# get detailed descriptive statistics stratified by gender, sort the table by the order of variables in the data, no statistical testing
get_desc_stat_grouping(sample_dat, 'gender', detail = T, sort = T, test = F)
?get_regression_estimates
get_desc_stat(sample_dat)
sample_dat
sample_dat$gender %>% unique()
?get_regression_estimates
get_regression_estimates(sample_dat, outcome = 'gender', predictor_vec = c('sex', 'height'), outcome_type = 'binary')
sample_dat_regression = sample_dat %>% mutate(gender = as.factor(gender))
sample_dat_regression
get_regression_estimates(sample_dat, outcome = 'gender', predictor_vec = c('sex', 'height'), outcome_type = 'binary')
get_regression_estimates(sample_dat_regression, outcome = 'gender', predictor_vec = c('sex', 'height'), outcome_type = 'binary')
str_detect('binary', 'gee|lme')
get_regression_estimates(sample_dat_regression, outcome = 'gender', predictor_vec = c( 'height'), outcome_type = 'binary')
iris
get_regression_estimates(sample_dat_regression, outcome = 'gender', predictor_vec = c( 'height'), outcome_type = 'binary')
get_regression_estimates(mtcars, outcome = 'mpg', predictor_vec = c( 'cyl'), outcome_type = 'linear')
mtcars
get_regression_estimates(sample_dat_regression, outcome = 'gender', predictor_vec = c( 'height'), outcome_type = 'binary')
class(mtcars)
mtcars$id
sample_dat$id
get_regression_estimates(sample_dat_regression, outcome = 'gender', predictor_vec = c( 'height'), outcome_type = 'binary')
get_regression_estimates(sample_dat_regression, outcome = 'gender', predictor_vec = c( 'height'), outcome_type = 'binary', format =T)
sample_dat_regression
sample_dat
starwas
starwars
starwars$skin_color
starwars$skin_color %>% unique()
starwars$hair_color %>% unique()
?sample_dat
?'sample_dat'
?mtcars
library(eas)
?sample_dat
sample_dat
?uds_z
?uds_z
starwars
sample_dat
startwars
starwars$hair_color
starwars$hair_color %>% table()
starwars$skin_color %>% table()
starwars$hair_color %>% table()
starwars %>% mutate(hair_color_group = ifelse(hair_color %in% c('black', 'brown', 'none'), hair_color, 'other')) %>% select(height, sex, gender, mass, hair_color_group) %>% filter(!is.na(gender))
sample_dat = starwars %>% mutate(hair_color_group = ifelse(hair_color %in% c('black', 'brown', 'none'), hair_color, 'other')) %>% select(height, sex, gender, mass, hair_color_group) %>% filter(!is.na(gender))
save(sample_dat, 'data/sample_dat.RData')
save(sample_dat, file = 'data/sample_dat.RData')
View(sample_dat)
# here is a sample dataset modified from the dataset starwars in tidyverse .
str(sample_dat)
# stratified by gender and testing for gender difference
get_desc_stat_grouping(sample_dat, 'gender')
get_regression_estimates(sample_dat_regression, outcome = 'gender', predictor_vec = c( 'height', 'hair_color_group'), outcome_type = 'binary', format =T)
sample_dat_regression = sample_dat %>% mutate(gender = as.factor(gender))
get_regression_estimates(sample_dat_regression, outcome = 'gender', predictor_vec = c( 'height', 'hair_color_group'), outcome_type = 'binary', format =T)
sample_dat_regression
library(kableExtra)
# perform linear regression for multiple outcomes with purrr
map(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kbl() %>% kable_styling()
# perform linear regression for multiple outcomes with purrr
map(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kable() %>% kable_styling()
library(kableExtra)
# perform linear regression for multiple outcomes with purrr
map(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kable() %>% kable_styling()
map(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear'))
# perform linear regression for multiple outcomes with purrr
map_df(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kable() %>% kable_styling()
# perform linear regression for multiple outcomes with purrr
map_df(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kable() %>% kable_styling() %>% collapse_rows()
# perform linear regression for multiple outcomes with purrr
map_df(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kable() %>% kable_styling() %>% collapse_rows(1)
map_df(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kableExtra::kable() %>% kableExtra::kable_styling() %>% kableExtra::collapse_rows(1)
# perform linear regression for multiple outcomes with purrr
map_df(c('height', 'mass'), ~get_regression_estimates(sample_dat_regression, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kableExtra::kable() %>% kableExtra::kable_styling() %>% kableExtra::collapse_rows(1)
sample_dat_regression = dplyr::mutate(sample_dat, gender = as.factor(gender))
# get formatted table for a logistic regression model
get_regression_estimates(dplyr::mutate(sample_dat, gender = as.factor(gender)), outcome = 'gender', predictor_vec = c( 'height', 'hair_color_group'), outcome_type = 'binary', format =T)
# perform linear regression for multiple outcomes with purrr
map_df(c('height', 'mass'), ~get_regression_estimates(sample_dat, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kableExtra::kable() %>% kableExtra::kable_styling() %>% kableExtra::collapse_rows(1)
devtools::document()
devtools::install()
search()
library(tidyreport)
sample_dat
# here is a sample dataset modified from the dataset starwars in tidyverse .
str(sample_dat)
get_desc_stat(sample_dat)
?str_remove
library(stringr)
get_desc_stat(sample_dat)
# stratified by gender and testing for gender difference
get_desc_stat_grouping(sample_dat, 'gender')
# get formatted table for a logistic regression model
get_regression_estimates(dplyr::mutate(sample_dat, gender = as.factor(gender)), outcome = 'gender', predictor_vec = c( 'height', 'hair_color_group'), outcome_type = 'binary', format =T)
# perform linear regression for multiple outcomes with purrr and get tables with kableExtra
map_df(c('height', 'mass'), ~get_regression_estimates(sample_dat, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kableExtra::kable() %>% kableExtra::kable_styling() %>% kableExtra::collapse_rows(1)
# perform linear regression for multiple outcomes with purrr and get tables with kableExtra
purrr::map_df(c('height', 'mass'), ~get_regression_estimates(sample_dat, outcome = .x, predictor_vec = c( 'sex', 'hair_color_group'), outcome_type = 'linear')) %>% kableExtra::kable() %>% kableExtra::kable_styling() %>% kableExtra::collapse_rows(1)
devtools::document()
devtools::install()
kableExtra::`%>%`
dplyr::`%>%`()
dplyr::`%>%`
?dplyr::`%>%`
?kableExtra::`%>%`
devtools::document()
devtools::install()
library(tidyreport)
# here is a sample dataset modified from the dataset starwars in tidyverse .
str(sample_dat)
?sample_dat
?get_desc_stat
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?sample_dat
devtools::document()
?sample_dat
get_engine(options$engine)
library(tidyverse)
[I'm an inline-style link](https://www.google.com)
sample_dat = starwars \%>\%  mutate(haircolor = ifelse(hair_color \%in\% c('black', 'brown', 'none'), hair_color, 'other')) \%>\% select(height, sex, gender, mass, haircolor) \%>\% filter(!is.na(gender))
#'
sample_dat = starwars %>%  mutate(haircolor = ifelse(hair_color \%in\% c('black', 'brown', 'none'), hair_color, 'other')) %>%  select(height, sex, gender, mass, haircolor) \%>\% filter(!is.na(gender))
sample_dat = starwars %>%  mutate(haircolor = ifelse(hair_color %in% c('black', 'brown', 'none'), hair_color, 'other')) %>%  select(height, sex, gender, mass, haircolor) %>% filter(!is.na(gender))
sample_dat
save(sample_dat, file = 'data/sample_dat.RData')
devtools::document()
devtools::install()
devtools::document()
devtools::install()
sample_dat
?get_desc_stat_grouping
all(T,T
)
all(T,T, NA)
all(T,T, F)
all(F,F)
any(F,F)
any(F,T,NA)
devtools::
install.packages('devtools')
